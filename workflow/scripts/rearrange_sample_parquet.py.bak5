#!/usr/bin/env python
# coding: utf-8

# In[1]:


import argparse
import os

parser = argparse.ArgumentParser(description='Import args from snakemake into iPython')

parser.add_argument('sample_name')
parser.add_argument('ref_file')
parser.add_argument('sample_file')
parser.add_argument('sample_out_file')

args = parser.parse_args()

sample_name = args.sample_name
ref_file = args.ref_file
sample_file = args.sample_file
sample_out_file = args.sample_out_file

# sample_name = 'WT-F1-018'
# ref_file = '/work/users/c/a/cannecar/co_analysis/seq_pipeline/data/parquets/reference.parquet'
# sample_file = '/work/users/c/a/cannecar/co_analysis/seq_pipeline/data/parquets/WT-F1-018_converted.parquet'
# sample_out_file = 'test_sample.pq'
# os.environ['DATABASE_URL'] = f"duckdb://default.db"

import duckdb
import pandas as pd
import ipywidgets

conn = duckdb.connect(f'{sample_name}.db')

get_ipython().run_line_magic('reload_ext', 'sql')
get_ipython().run_line_magic('sql', 'conn --alias duckdb')


# In[2]:


get_ipython().run_cell_magic('sql', '', 'SET\n  preserve_insertion_order = FALSE;\n')


# In[3]:


get_ipython().run_cell_magic('sql', '', "CREATE\nOR REPLACE TABLE temp_vcfs AS\nSELECT\n  *\nFROM\n  read_parquet ('{{sample_file}}');\n")


# In[4]:


# get_ipython().run_cell_magic('sql', '', 'SELECT\n  *\nFROM\n  temp_vcfs;\n')


# In[5]:


get_ipython().run_cell_magic('sql', '', "CREATE\nOR REPLACE TABLE vcfs AS\nSELECT\n  sample,\n  chromosome,\n  position AS int_pos,\n  reference AS old_ref,\n  variant AS old_variant,\n  quality,\n  genotype AS old_genotype,\n  depth,\n  allele_depth,\n  (\n    CASE\n      WHEN temp_vcfs.variant = '.' THEN UPPER(temp_vcfs.reference)\n      ELSE UPPER(temp_vcfs.variant)\n    END\n  ) AS new_variant\nFROM\n  temp_vcfs;\n")


# In[6]:


# get_ipython().run_cell_magic('sql', '', 'SELECT\n  *\nFROM\n  vcfs;\n')


# In[7]:


get_ipython().run_cell_magic('sql', '', "CREATE\nOR REPLACE TABLE ad_split AS \nSELECT\n    *,\n    CAST(string_split(allele_depth, ',')[1] AS INTEGER) AS initial_ref_reads,\n    CAST(string_split(allele_depth, ',')[2] AS INTEGER) AS initial_variant_reads,\nFROM vcfs;\n")


# In[11]:


# get_ipython().run_cell_magic('sql', '', "SELECT\n  *\nFROM\n  ad_split\nWHERE\n  old_genotype = '0/1';\n")


# In[12]:


get_ipython().run_cell_magic('sql', '', "CREATE\nOR REPLACE TABLE refs AS\nSELECT\n  *\nFROM\n  read_parquet ('{{ref_file}}');\n")


# In[13]:


# get_ipython().run_cell_magic('sql', '', 'SELECT\n  *\nFROM\n  refs;\n')


# In[14]:


get_ipython().run_cell_magic('sql', '', 'CREATE\nOR REPLACE TABLE samples_rearranged AS\nSELECT\n  *\nFROM\n  ad_split\n  INNER JOIN refs ON ad_split.chromosome = refs.chromosome\n  AND ad_split.int_pos = refs.position\nWHERE\n  new_variant = reference\n  OR new_variant = variant;\n')


# In[15]:


# get_ipython().run_cell_magic('sql', '', 'SELECT\n  *\nFROM\n  samples_rearranged;\n')


# In[20]:


get_ipython().run_cell_magic('sql', '', "CREATE\nOR REPLACE TABLE ads_swapped AS\nSELECT\n  sample,\n  chromosome,\n  POSITION,\n  reference,\n  variant,\n  quality,\n  (\n    CASE\n      WHEN old_ref = reference THEN old_genotype\n      WHEN old_ref != reference\n      AND old_genotype = '1/1' THEN '0/0'\n      WHEN old_ref != reference\n      AND old_genotype = '0/0' THEN '1/1'\n      WHEN old_genotype = '0/1' THEN '0/1'\n      ELSE './.'\n    END\n  ) AS genotype,\n  depth,\n  (\n    CASE\n      WHEN reference = old_ref THEN initial_ref_reads\n      WHEN reference = new_variant THEN initial_variant_reads\n      ELSE 0\n    END\n  ) AS ref_reads,\n  (\n    CASE\n      WHEN old_ref = reference THEN initial_variant_reads\n      WHEN reference = new_variant THEN initial_ref_reads\n      ELSE 0\n    END\n  ) AS variant_reads\nFROM\n  samples_rearranged;\n")


# In[21]:


# get_ipython().run_cell_magic('sql', '', "SELECT\n  *\nFROM\n  ads_swapped\nWHERE\n  genotype = '0/1';\n")


# In[22]:


get_ipython().run_cell_magic('sql', '', "SET preserve_insertion_order = true;\nCREATE\nOR REPLACE TABLE final_samples AS\nSELECT \n    string_split(sample, '-')[1] AS condition,\n    string_split(sample, '-')[2] AS sample_type,\n    string_split(sample, '-')[3] AS sample_num,\n    UPPER(reference) AS reference,\n    UPPER(variant) AS variant,\n    chromosome,\n    position,\n    ref_reads,\n    variant_reads,\n    quality AS QUAL,\n    genotype AS GT,\n    depth AS DP\nFROM\n    ads_swapped\nORDER BY\n    sample_num, chromosome, position;\n")


# In[23]:


# get_ipython().run_cell_magic('sql', '', 'SELECT\n  *\nFROM\n  final_samples;\n')


# In[24]:


get_ipython().run_cell_magic('sql', '', "COPY (\n  SELECT\n    *\n  FROM\n    final_samples\n) TO '{{sample_out_file}}' (FORMAT 'parquet');\n")


# In[ ]:




